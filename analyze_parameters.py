
# we would like to analyse how well we can infer the strategy parameters from
# the counts
# we read the counts from the df_counts.csv generated by main
# and then join the generated strategies strategies_generated.csv (use df_strategies of StrategyReader)
# then for each allele we calculate the fraction of cells for which a count is detected
# (and not detected)
import os
import pandas as pd
import matplotlib.pyplot as plt
from simulator.StrategyReader import StrategyReader

if os.name == 'nt':
    dir_sep = "\\"
    # TODO: set your own out directory
    out_dir = r"D:\26 Battich Oudenaarden transcriptional bursts\runs"
else:
    dir_sep = "/"
    out_dir = ""
plot_dir = out_dir + dir_sep + "analyze_parameters.plots"
os.makedirs(plot_dir, exist_ok=True)

sr = StrategyReader(out_dir + dir_sep + "strategies_generated.csv" )
sr.read_strategies()
df_strategies = sr.df_strategies

# plt.scatter(df_strategies.k_10, df_strategies.k_01)
# plt.show()
nr_cells = 100
efficiency = 100
label = "4SU"  # 2nd window

filename_counts = out_dir + dir_sep + "df_counts_{eff}.csv".format(eff=efficiency)

df_counts = pd.read_csv(filename_counts, sep=';')

# mean expression
df_means = df_counts.groupby(['allele_id', 'strategy', 'label'])['real_count'].mean().reset_index()
df_means = pd.merge(df_means, df_strategies, how="left",
                    left_on=['strategy'],
                    right_on=['name'])
df_means = df_means[df_means.label == label]

# cell counts (for plotting against fraction of time in active state)
df_cell_counts = df_counts.groupby(['allele_id', 'strategy', 'label'])['real_count'].count().reset_index()
df_cell_counts["no_count"] = nr_cells - df_cell_counts.real_count
df_cell_counts = pd.merge(df_cell_counts, df_strategies, how="left",
                          left_on=['strategy'],
                          right_on=['name'])
df_cell_counts = df_cell_counts[df_cell_counts.label == label]

# plot for mean counts vs k_syn
plt.scatter(df_means.k_syn, df_means.real_count)

plt.title("Correlation between k_syn and mean count of label {label}; efficiency={eff}%".
          format(label=label, eff=efficiency))
plt.xlabel("transcription rate")
plt.ylabel("count transcripts sampled with {eff}% efficiency".format(eff=efficiency))

plot_name = plot_dir + dir_sep + "mean_counts_vs_k_syn_{eff}.svg".format(eff=efficiency)
plt.savefig(plot_name)
plt.close(1)

# plots for number of cells vs fraction of time in active state
plt.scatter(df_cell_counts.fraction_ON, df_cell_counts.real_count)

plt.title("{label} counts (2nd window); efficiency={eff}%".
          format(label=label, eff=efficiency))
plt.xlabel("fraction of active time")
plt.ylabel("# cells with counts ({eff}% efficiency)".format(eff=efficiency))

plot_name = plot_dir + dir_sep + "nr_cells_vs_active_time_{eff}.svg".format(eff=efficiency)
plt.savefig(plot_name)
plt.close(1)
